"""Module for processing tilemap generators (that can be used in backgrounds)."""
import logging
import random
from dataclasses import dataclass
from typing import Dict, Optional, Any

from resbuilder.resources.tiles import TilePacker


@dataclass(frozen=True)
class TilemapGenerator:
    """Generator for generating randomized tilemaps.

    Every tile has relative weight used during randomization.
    """
    tiles_weights: Dict[int, int]

    def next_tile(self) -> Optional[int]:
        """Generate the next tile from tilemap generator.

        Generated tile is the result of randomization with respect of tiles weights.

        :return: next generated tile
        """
        if not self.tiles_weights:
            return None
        return random.choices(list(self.tiles_weights.keys()),
                              list(self.tiles_weights.values())).pop()


def process_tilemap_generators(input_data: Any, tile_packer: TilePacker) \
        -> Dict[str, TilemapGenerator]:
    """Process tilemap generators from input resource file.

    :param input_data: input data from JSON file (root -> tilemap_generators)
    :param tile_packer: tile packer used to pack tiles generated by tilemap generator
    :return: processed tilemap generators (ready to be serialized to JSON)
    """
    generators: Dict[str, TilemapGenerator] = {}

    for generator_name, generator_data in input_data.items():
        tiles_probs = {}
        for tile_filename, tile_probability in generator_data.items():
            tile_id = tile_packer.pack_tile(tile_filename)
            tiles_probs[tile_id] = tile_probability

        generators[generator_name] = TilemapGenerator(tiles_probs)
        logging.info("Tilemap generator '%s' added", generator_name)

    logging.info("Total tilemap generators: %d", len(generators))

    return generators
