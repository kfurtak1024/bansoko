"""Module for processing tilemap generators (that can be used in backgrounds)."""
import logging
import random
from dataclasses import dataclass
from typing import Dict, Any

import pyxel

from bansoko.graphics import Rect
from resbuilder.resources.tiles import TilePacker


@dataclass(frozen=True)
class TilemapGenerator:
    """Generator for generating randomized tilemaps.

    Every tile has relative weight used during randomization.
    """
    tiles_weights: Dict[int, int]

    def generate_tilemap(self, tilemap_id: int, tilemap_rect: Rect, seed: int) -> None:
        """Generate a tilemap using random tiles at given position in Pyxel's mega-tilemap.

        Tiles are randomized using specified seed and tiles weights.

        :param tilemap_id: Pyxel's mega-tilemap id
        :param tilemap_rect: tilemap rect where generated tiles will be put into
        :param seed: seed to be used during tiles generation
        """
        state = random.getstate()
        random.seed(seed)
        tilemap_points = tilemap_rect.inside_points()
        for point in tilemap_points:
            pyxel.tilemap(tilemap_id).set(point.x, point.y, self._next_tile())
        random.setstate(state)

    def _next_tile(self) -> int:
        if not self.tiles_weights:
            return 0
        return random.choices(list(self.tiles_weights.keys()),
                              list(self.tiles_weights.values())).pop()


def process_tilemap_generators(input_data: Any, tile_packer: TilePacker) \
        -> Dict[str, TilemapGenerator]:
    """Process tilemap generators from input resource file.

    :param input_data: input data from JSON file (root -> tilemap_generators)
    :param tile_packer: tile packer used to pack tiles generated by tilemap generator
    :return: processed tilemap generators (ready to be serialized to JSON)
    """
    generators: Dict[str, TilemapGenerator] = {}

    for generator_name, generator_data in input_data.items():
        tiles_weights = {}
        for tile_filename, tile_probability in generator_data.items():
            tile_id = tile_packer.pack_tile(tile_filename)
            tiles_weights[tile_id] = tile_probability

        generators[generator_name] = TilemapGenerator(tiles_weights)
        logging.info("Tilemap generator '%s' added", generator_name)

    logging.info("Total tilemap generators: %d", len(generators))

    return generators
